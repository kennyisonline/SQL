# Regarding this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#I then inserted the spotify_top50_2021.csv into the table.

#Finally, I explored the data using the following SQL. 

#First I determined the top 5 most danceable songs:
SELECT track_name, danceability 
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 5;
--2. What is the average danceability of the top 50 songs?
SELECT AVG(danceability) 
FROM BIT_DB.Spotifydata;
--3. Who are the top 10 artists based on popularity? 
SELECT artist_name 
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;
--4. What artist released the longest song?
SELECT artist_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;
--OR
SELECT artist_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata;
--5. Who are the top 10 artists by popularity
SELECT artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity DESC
LIMIT 10;
--6. Then finally I determined what the average danceability was for the 10 most popular songs
SELECT AVG(danceability) FROM (SELECT danceability
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10);/*Dont know why this code doesn't work*/


