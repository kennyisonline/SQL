SQL query answers and insight into a dataset called chinook, which represents a digital media store and includes tables for artists, albums, media tracks, invoices, and customers.

--1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").
SELECT FirstName, LastName, CustomerId, Country 
FROM chinook.customers
WHERE Country != 'USA'; 

--2. Show only the Customers from Brazil.
SELECT FirstName, LastName, CustomerId, Country 
FROM chinook.customers
WHERE Country = 'Brazil';

--3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT c.FirstName, c.LastName, i.InvoiceId, i.BillingCountry, i.InvoiceDate
FROM chinook.invoices as i 
LEFT JOIN chinook.customers as c 
ON i.CustomerId = c.CustomerId 
WHERE i.BillingCountry = "Brazil";

--4. Show the Employees who are Sales Agents.
SELECT *
FROM chinook.employees 
WHERE Title = 'Sales Support Agent';

--5. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT(BillingCountry)
FROM chinook.invoices;

--6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT i.InvoiceId, e.LastName, e.FirstName
FROM chinook.invoices AS i 
LEFT JOIN chinook.customers AS c 
ON i.CustomerId = c.CustomerId
LEFT JOIN chinook.employees AS e
ON c.SupportRepId = e.EmployeeId 
WHERE Title = 'Sales Support Agent';

--7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT i.Total, c.FirstName, c.LastName, c.Country, i.BillingCountry, e.LastName, e.FirstName
FROM chinook.invoices AS i 
LEFT JOIN chinook.customers AS c 
ON i.CustomerId = c.CustomerId
LEFT JOIN chinook.employees AS e
ON c.SupportRepId = e.EmployeeId;

--8. How many Invoices were there in 2009?
SELECT COUNT(*)
FROM chinook.invoices
WHERE InvoiceDate LIKE '2009%';
--OR
SELECT COUNT(*)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'; 

--9. What are the total sales for 2009?
SELECT SUM(Total) AS Total_Sales
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

--10. Write a query that includes the purchased track name with each invoice line ID.
SELECT t.Name, i.InvoiceLineId
FROM chinook.tracks AS t
LEFT JOIN chinook.invoice_items AS i
ON t.TrackId = i.TrackId;

--11. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT t.Name AS TRACK_NAME, art.Name AS ARTIST_NAME, i.InvoiceLineId
FROM chinook.invoice_items AS i
LEFT JOIN chinook.tracks AS t 
ON i.TrackId = t.TrackId
INNER JOIN chinook.albums AS a
ON t.AlbumId = a.AlbumId
LEFT JOIN chinook.artists AS art
ON a.ArtistId = art.ArtistId;

--12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT t.Name AS TRACK_NAME, a.Title AS ALBUM_NAME, m.Name AS MEDIA_TYPE, g.Name AS GENRE
FROM chinook.tracks AS t
LEFT JOIN chinook.albums AS a  
ON t.AlbumId = a.AlbumId
LEFT JOIN chinook.media_types AS m
ON t.MediaTypeId = m.MediaTypeId
LEFT JOIN chinook.genres AS g
ON t.GenreId = g.GenreId;

--13. Show the total sales made by each sales agent.
SELECT ROUND(SUM(i.Total),2) AS TOTAL_SALES_PER_SALES_AGENT, e.LastName, e.FirstName
FROM chinook.invoices AS i 
LEFT JOIN chinook.customers AS c 
ON i.CustomerId = c.CustomerId
LEFT JOIN chinook.employees AS e
ON c.SupportRepId = e.EmployeeId
WHERE e.Title = 'Sales Support Agent'
GROUP BY e.LastName, e.FirstName;

--14. Which sales agent made the most dollars in sales in 2009?
SELECT e.LastName, e.FirstName, ROUND(SUM(i.Total),2) AS TOTAL_SALES_PER_SALES_AGENT
FROM chinook.invoices AS i 
LEFT JOIN chinook.customers AS c 
ON i.CustomerId = c.CustomerId
LEFT JOIN chinook.employees AS e
ON c.SupportRepId = e.EmployeeId
WHERE e.Title = 'Sales Support Agent' AND i.InvoiceDate LIKE '2009%'
GROUP BY e.LastName, e.FirstName
ORDER BY ROUND(SUM(i.Total),2) DESC
LIMIT 1;   
